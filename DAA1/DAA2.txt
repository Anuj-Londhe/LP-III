import heapq
 
class Node:
    def __init__(self, freq, symbol, left=None, right=None):
        self.freq = freq           # Frequency of the symbol
        self.symbol = symbol       # Symbol (character)
        self.left = left           # Left child
        self.right = right         # Right child
        self.huff = ''             # Huffman code (initially empty)
 
    # Defining comparison for heap operations (based on frequency)
    def __lt__(self, nxt):
        return self.freq < nxt.freq
 
    # Function to print the Huffman codes by traversing the tree
    def print_nodes(self, val=''):
        new_val = val + str(self.huff)
        # If the node has a left child, recurse to the left
        if self.left:
            self.left.print_nodes(new_val)
        # If the node has a right child, recurse to the right
        if self.right:
            self.right.print_nodes(new_val)
        # If it's a leaf node (no children), print the symbol and its code
        if not self.left and not self.right:
            print(f"{self.symbol} -> {new_val}")
 
if __name__ == "__main__":
    chars = ['a', 'b', 'c', 'd', 'e', 'f']
    freq = [5, 9, 12, 13, 16, 45]
 
    nodes = []
 
    # Create a heap of nodes
    for i in range(len(chars)):
        heapq.heappush(nodes, Node(freq[i], chars[i]))
 
    # Building the Huffman tree
    while len(nodes) > 1:
        # Pop two nodes with the lowest frequency
        left = heapq.heappop(nodes)
        right = heapq.heappop(nodes)
 
        # Assign Huffman codes: '0' to the left node, '1' to the right node
        left.huff = '0'
        right.huff = '1'
 
        # Create a new node combining the two
        new_node = Node(left.freq + right.freq, left.symbol + right.symbol, left, right)
 
        # Add the new node to the heap
        heapq.heappush(nodes, new_node)
 
    # The final node is the root of the Huffman tree
    root_node = nodes[0]
 
    # Print the Huffman codes for all characters
    root_node.print_nodes()